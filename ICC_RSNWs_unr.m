% This script calculates the ICC on the average connectivity of known RS
% networks defined according to the Gordon atlas


allsubs={'100206' '100307' '100408' '100610' '101006' '101309' '101915' '102008' '102109' '102311' '102513' '102614' '102715' '102816' '103010' '103111' '103212' '103414' '103515' '103818' '104012' '104416' '104820' '105014' '105115' '105216' '105923' '106319' '106521' '106824' '107018' '107321' '107422' '107725' '108020' '108121' '108222' '108525' '108828' '109123' '109325' '110007' '110411' '111009' '111211' '111413' '111514' '112314' '112516' '112920' '113215' '113316' '113619' '113922' '114217' '114318' '114419' '114621' '114823' '115017' '115219' '115320' '115724' '115825' '116524' '117021' '117122' '117324' '117930' '118023' '118124' '118225' '118730' '118831' '118932' '119025' '119126' '120111' '120212' '120414' '120717' '121416' '121618' '121921' '122317' '122822' '123117' '123420' '123521' '123723' '123824' '123925' '124220' '124624' '124826' '125222' '125424' '125525' '126325' '126426' '126628' '127226' '127630' '127731' '127832' '127933' '128026' '128127' '128632' '128935' '129028' '129129' '129331' '129634' '130013' '130114' '130316' '130417' '130619' '130720' '130821' '130922' '131217' '131419' '131722' '131823' '131924' '132017' '132118' '133019' '133625' '133827' '133928' '134021' '134223' '134324' '134425' '135124' '135225' '135528' '135629' '135730' '135932' '136227' '136732' '136833' '137027' '137128' '137229' '137431' '137532' '137633' '137936' '138231' '138332' '138534' '138837' '139435' '139839' '140319' '140824' '140925' '141119' '141422' '142828' '143224' '143325' '143426' '144125' '144226' '144428' '144731' '144832' '144933' '145834' '146331' '146432' '146533' '146735' '146937' '147030' '147636' '148032' '148133' '148335' '148941' '149236' '149337' '149539' '149741' '149842' '150726' '150928' '151223' '151324' '151425' '151526' '151627' '151829' '151930' '152225' '152427' '152831' '153025' '153126' '153227' '153429' '153631' '153732' '153833' '153934' '154229' '154330' '154431' '154532' '154734' '154835' '154936' '155938' '156031' '156233' '156334' '156536' '156637' '157336' '157437' '157942' '158035' '158136' '158338' '158540' '159138' '159239' '159340' '159441' '159744' '160123' '160729' '160830' '161327' '161731' '161832' '162026' '162228' '162329' '162935' '163129' '163331' '163836' '164030' '164131' '164636' '164939' '165032' '165436' '165638' '165840' '166640' '167036' '167440' '167743' '168240' '168341' '168745' '168947' '169040' '169343' '169444' '169545' '169949' '171330' '171532' '171633' '172029' '172130' '172332' '172433' '172534' '172938' '173334' '173435' '173536' '173637' '173738' '173839' '173940' '174437' '174841' '175136' '175237' '175338' '175439' '175540' '175742' '176037' '176441' '176542' '176845' '177645' '177746' '178142' '178243' '178748' '178950' '179245' '179346' '180129' '180230' '180432' '180533' '180735' '180937' '181636' '182032' '182436' '182739' '182840' '183034' '185139' '185341' '185442' '185846' '185947' '186141' '186444' '186545' '186848' '187143' '187345' '187547' '187850' '188145' '188347' '188448' '188549' '188751' '189349' '189450' '190031' '191033' '191235' '191336' '191437' '191942' '192035' '192136' '192237' '192439' '192540' '192641' '192843' '193239' '193845' '194140' '194443' '194645' '194746' '195041' '195445' '195647' '195950' '196144' '196346' '196750' '197348' '197550' '198047' '198350' '198451' '198653' '198855' '199150' '199251' '199352' '199453' '200008' '200109' '200311' '200513' '200614' '200917' '201111' '201414' '201818' '202113' '202719' '203923' '204016' '204319' '204420' '204521' '204622' '205119' '205220' '205725' '205826' '206222' '206323' '206525' '206727' '206828' '207123' '207426' '208024' '208125' '208226' '208327' '208630' '209127' '209228' '209329' '209834' '209935' '210011' '210112' '210415' '210617' '211114' '211316' '211417' '211619' '211821' '211922' '212015' '212116' '212217' '212318' '212419' '212823' '213017' '213421' '213522' '214019' '214221' '214423' '214524' '214625' '214726' '217126' '217429' '219231' '220721' '221319' '223929' '227432' '228434' '233326' '236130' '237334' '239136' '239944' '245333' '246133' '248339' '249947' '250427' '250932' '251833' '255639' '255740' '256540' '257542' '257845' '263436' '268749' '268850' '274542' '275645' '280739' '280941' '281135' '283543' '285345' '285446' '286347' '286650' '287248' '289555' '290136' '293748' '295146' '298051' '298455' '299154' '300618' '300719' '303119' '303624' '304020' '304727' '305830' '307127' '308129' '309636' '310621' '311320' '314225' '316633' '316835' '318637' '320826' '321323' '322224' '325129' '329440' '329844' '330324' '333330' '334635' '341834' '342129' '346137' '346945' '348545' '349244' '350330' '352132' '352738' '353740' '356948' '358144' '361234' '361941' '365343' '366042' '366446' '368551' '368753' '371843' '376247' '377451' '378756' '378857' '379657' '380036' '381038' '381543' '385450' '387959' '389357' '390645' '391748' '392447' '393247' '394956' '395251' '395756' '395958' '397154' '397760' '397861' '406432' '406836' '412528' '414229' '419239' '421226' '422632' '424939' '429040' '432332' '436239' '436845' '441939' '445543' '448347' '449753' '453542' '454140' '456346' '459453' '463040' '467351' '475855' '479762' '480141' '481042' '481951' '485757' '486759' '495255' '497865' '499566' '500222' '506234' '510225' '512835' '513130' '513736' '516742' '517239' '519647' '519950' '520228' '523032' '524135' '525541' '529549' '529953' '530635' '531536' '531940' '536647' '540436' '541640' '541943' '545345' '547046' '548250' '552241' '553344' '555348' '555651' '557857' '558960' '559053' '559457' '561242' '561444' '561949' '562345' '562446' '565452' '566454' '567052' '567961' '568963' '570243' '571144' '572045' '573249' '573451' '576255' '578057' '579665' '579867' '580044' '580650' '580751' '581349' '581450' '583858' '585256' '585862' '586460' '587664' '588565' '589567' '592455' '594156' '597869' '598568' '599065' '599671' '601127' '604537' '611938' '613538' '615441' '615744' '616645' '617748' '618952' '620434' '622236' '623844' '626648' '627852' '633847' '634748' '635245' '638049' '645450' '645551' '647858' '654350' '654552' '654754' '656253' '657659' '660951' '663755' '664757' '665254' '667056' '668361' '671855' '672756' '673455' '675661' '677766' '677968' '679568' '679770' '680250' '680452' '680957' '683256' '685058' '686969' '687163' '690152' '692964' '693764' '694362' '695768' '698168' '700634' '702133' '704238' '705341' '707749' '713239' '715041' '715647' '715950' '720337' '724446' '725751' '727553' '727654' '728454' '729254' '729557' '731140' '732243' '735148' '737960' '742549' '744553' '748258' '748662' '749058' '749361' '751348' '753150' '753251' '756055' '757764' '759869' '760551' '761957' '765056' '769064' '770352' '773257' '774663' '782561' '784565' '788674' '788876' '789373' '792564' '792867' '793465' '800941' '802844' '803240' '809252' '810843' '812746' '814548' '814649' '816653' '820745' '825048' '825654' '826353' '826454' '827052' '828862' '832651' '833148' '833249' '835657' '837560' '837964' '841349' '843151' '844961' '845458' '849264' '849971' '852455' '856766' '856968' '857263' '859671' '861456' '865363' '867468' '869472' '870861' '871762' '871964' '872158' '872562' '873968' '877168' '877269' '878776' '878877' '882161' '884064' '885975' '886674' '887373' '888678' '889579' '891667' '894067' '894673' '894774' '896778' '896879' '898176' '899885' '901038' '901139' '901442' '904044' '905147' '907656' '908860' '910241' '910443' '911849' '912447' '917255' '917558' '919966' '922854' '923755' '926862' '927359' '930449' '932554' '933253' '937160' '942658' '947668' '951457' '952863' '955465' '959574' '965771' '966975' '971160' '978578' '979984' '983773' '984472' '987074' '989987' '990366' '991267' '992673' '992774' '993675' '996782'};
excluded={'102008' '104820' '124220' '140824' '147030' '151223' '151526' '153833' '159138' '161327' '161832' '163331' '171532' '175439' '205220' '223929' '233326' '298051' '311320' '352132' '366446' '392447' '453542' '562345' '748662' '833249' '947668'};
subs=allsubs(~ismember(allsubs, excluded));

% Run only on unrelated subjects
disp('Running only on unrelated subjects')
unrelated={'100206', '100307', '100408', '100610', '101006', '101309', '101915', '102109', '102311', '102513', '102614', '102715', '102816', '103010', '103111', '103212', '103414', '103515', '103818', '104012', '104416', '105014', '105115', '105216', '105923', '106521', '106824', '107018', '107321', '107422', '107725', '108020', '108121', '108525', '108828', '109123', '109325', '110007', '110411', '111009', '111211', '111413', '112314', '112516', '112920', '113215', '113922', '114217', '114318', '114419', '114621', '114823', '115017', '115219', '115320', '115825', '116524', '117021', '117122', '117324', '117930', '118124', '118730', '118831', '118932', '119025', '119126', '120212', '120414', '120717', '121416', '121618', '121921', '122317', '122822', '123117', '123420', '123521', '123723', '123824', '123925', '125222', '125424', '125525', '126325', '126426', '126628', '127226', '127630', '127832', '127933', '128026', '128127', '128632', '128935', '129028', '129331', '129634', '130013', '130114', '130316', '130417', '130619', '130720', '131217', '131419', '131722', '131823', '131924', '132017', '132118', '133019', '133827', '133928', '134021', '134223', '134324', '135124', '135225', '135528', '135629', '136227', '136833', '137027', '137229', '137532', '138332', '138534', '138837', '139435', '139839', '140319', '140925', '141422', '142828', '143224', '143426', '144125', '144226', '144428', '144832', '144933', '146432', '146533', '146937', '147636', '148133', '148941', '149236', '149741', '149842', '150726', '150928', '151324', '151425', '151627', '151930', '152427', '152831', '153126', '153227', '153631', '153934', '154229', '154330', '154532', '154734', '154835', '154936', '156031', '156233', '156334', '156536', '156637', '157437', '157942', '158136', '159239', '159340', '159441', '159744', '160729', '160830', '162026', '162228', '164030', '164131', '164636', '164939', '165032', '165638', '165840', '167036', '167440', '167743', '168341', '168745', '168947', '169343', '169444', '169545', '169949', '171330', '172029', '172332', '172433', '172534', '172938', '173435', '173536', '173637', '173738', '173940', '174437', '174841', '175338', '175742', '176542', '177645', '178142', '178950', '179245', '179346', '180129', '180230', '180432', '180533', '180735', '182739', '182840', '185341', '185442', '185846', '186141', '186444', '187143', '188145', '188347', '188549', '188751', '189349', '189450', '190031', '191033', '192035', '192136', '192641', '193845', '194645', '194746', '195041', '195647', '196346', '196750', '197550', '198451', '198855', '199251', '199352', '200513', '200614', '200917', '201414', '201818', '202113', '204016', '204420', '206323', '206727', '206828', '207426', '208125', '208226', '208327', '209329', '210011', '210112', '210415', '211114', '211821', '212015', '212217', '212318', '213017', '213421', '213522', '214221', '214423', '219231', '220721', '227432', '236130', '239944', '245333', '257845', '268749', '274542', '275645', '280941', '281135', '285446', '286347', '286650', '287248', '289555', '295146', '303119', '303624', '304020', '309636', '310621', '314225', '316633', '318637', '321323', '322224', '329844', '346945', '348545', '349244', '350330', '352738', '358144', '361234', '361941', '368753', '376247', '378756', '381543', '387959', '391748', '395756', '397154', '397760', '397861', '414229', '419239', '436239', '445543', '448347', '459453', '480141', '499566', '510225', '516742', '519647', '525541', '529549', '529953', '547046', '552241', '553344', '555348', '555651', '561444', '561949', '567052', '571144', '576255', '579665', '580751', '585256', '585862', '589567', '592455', '599671', '615441', '618952', '622236', '656253', '675661', '677968', '679568', '680250', '680452', '692964', '698168', '725751', '727553', '729254', '748258', '749361', '756055', '757764', '760551', '827052', '835657', '837560', '878877', '888678', '894067', '907656', '919966', '955465', '966975', '989987', '993675'};
subs=subs(ismember(subs, unrelated));

matpath='/Users/ltozzi/Desktop/mnt_panlab/PANLab_Datasets/CONNECTOME/Leo/HCP_HYA_REST_FIX/Connmats'; % path to the matrices
edges_outputpath='/Users/ltozzi/Desktop/Edges'; % where edges will be saved
ICC_outputpath='/Users/ltozzi/Desktop/ICCs'; % where edges will be saved

% no gsr

for sub=1:length(subs)
    
    disp(subs{sub})
    
    % Load Gordon matrices
    
    mat1=csvread(strcat(matpath, '/gordon/', subs{sub}, '_rfMRI_REST1_concat_gordon.csv'));
    mat2=csvread(strcat(matpath, '/gordon/', subs{sub}, '_rfMRI_REST2_concat_gordon.csv'));
    
    % Compute each RSN average for session 1
    
    dmn1=mean(unpackconnmat(mat1(48:88, 48:88))); % default mode
    pao1=mean(unpackconnmat(mat1(89:96, 89:96))); % parieto-occipital
    fp1=mean(unpackconnmat(mat1(97:120, 97:120))); % fronto-parietal
    sal1=mean(unpackconnmat(mat1(121:124, 121:124))); % salience
    cop1=mean(unpackconnmat(mat1(125:164, 125:164))); % cingulo-opercular
    mep1=mean(unpackconnmat(mat1(165:169, 165:169))); % medial parietal
    dan1=mean(unpackconnmat(mat1(170:201, 170:201))); % dorsal attention
    van1=mean(unpackconnmat(mat1(202:224, 202:224))); % ventral attention
    vis1=mean(unpackconnmat(mat1(225:263, 225:263))); % visual
    smh1=mean(unpackconnmat(mat1(264:301, 264:301))); % supplementary motor (hand)
    smm1=mean(unpackconnmat(mat1(302:309, 302:309))); % supplementary motor (mouth)
    aud1=mean(unpackconnmat(mat1(310:333, 310:333))); % auditory
    
    allnws1(sub, :)=[dmn1 pao1 fp1 sal1 cop1 mep1 dan1 van1 vis1 smh1 smm1 aud1];
    
    
    % Compute each RSN average for session 2
    
    dmn2=mean(unpackconnmat(mat2(48:88, 48:88))); % default mode
    pao2=mean(unpackconnmat(mat2(89:96, 89:96))); % parieto-occipital
    fp2=mean(unpackconnmat(mat2(97:120, 97:120))); % fronto-parietal
    sal2=mean(unpackconnmat(mat2(121:124, 121:124))); % salience
    cop2=mean(unpackconnmat(mat2(125:164, 125:164))); % cingulo-opercular
    mep2=mean(unpackconnmat(mat2(165:169, 165:169))); % medial parietal
    dan2=mean(unpackconnmat(mat2(170:201, 170:201))); % dorsal attention
    van2=mean(unpackconnmat(mat2(202:224, 202:224))); % ventral attention
    vis2=mean(unpackconnmat(mat2(225:263, 225:263))); % visual
    smh2=mean(unpackconnmat(mat2(264:301, 264:301))); % supplementary motor (hand)
    smm2=mean(unpackconnmat(mat2(302:309, 302:309))); % supplementary motor (mouth)
    aud2=mean(unpackconnmat(mat2(310:333, 310:333))); % auditory
    
    allnws2(sub, :)=[dmn2 pao2 fp2 sal2 cop2 mep2 dan2 van2 vis2 smh2 smm2 aud2];
    
    
end

    csvwrite(strcat(edges_outputpath, '/RSNavg1_unr.csv'), allnws1)
    csvwrite(strcat(edges_outputpath, '/RSNavg2_unr.csv'), allnws2)


% Now compute the ICC for these values

t1=csvread(strcat(edges_outputpath, '/RSNavg1_unr.csv'));
t2=csvread(strcat(edges_outputpath, '/RSNavg2_unr.csv'));

for feat=1:size(t1, 2)
    
    data=[ t1(:,feat) t2(:,feat) ];
    [r, LB, UB, F, df1, df2, p] = ICC(data, 'C-1');
    allicc(feat)=r;
    alllb(feat)=LB;
    allub(feat)=UB;
    allp(feat)=p;
    
end

csvwrite(strcat(ICC_outputpath, '/ICC_RSN_gordon_icc_unr.csv'), allicc)
csvwrite(strcat(ICC_outputpath, '/ICC_RSN_gordon_ub_unr.csv'), allub)
csvwrite(strcat(ICC_outputpath, '/ICC_RSN_gordon_lb_unr.csv'), alllb)
csvwrite(strcat(ICC_outputpath, '/ICC_RSN_gordon_p_unr.csv'), allp)

%%%%%% GSR


% Gsr

for sub=1:length(subs)
    
    disp(subs{sub})
    
    % Load Gordon matrices
    
    mat1=csvread(strcat(matpath, '/gordon/', subs{sub}, '_rfMRI_REST1_concat_gordon_gsr.csv'));
    mat2=csvread(strcat(matpath, '/gordon/', subs{sub}, '_rfMRI_REST2_concat_gordon_gsr.csv'));
    
    % Compute each RSN average for session 1
    
    dmn1=mean(unpackconnmat(mat1(48:88, 48:88))); % default mode
    pao1=mean(unpackconnmat(mat1(89:96, 89:96))); % parieto-occipital
    fp1=mean(unpackconnmat(mat1(97:120, 97:120))); % fronto-parietal
    sal1=mean(unpackconnmat(mat1(121:124, 121:124))); % salience
    cop1=mean(unpackconnmat(mat1(125:164, 125:164))); % cingulo-opercular
    mep1=mean(unpackconnmat(mat1(165:169, 165:169))); % medial parietal
    dan1=mean(unpackconnmat(mat1(170:201, 170:201))); % dorsal attention
    van1=mean(unpackconnmat(mat1(202:224, 202:224))); % ventral attention
    vis1=mean(unpackconnmat(mat1(225:263, 225:263))); % visual
    smh1=mean(unpackconnmat(mat1(264:301, 264:301))); % supplementary motor (hand)
    smm1=mean(unpackconnmat(mat1(302:309, 302:309))); % supplementary motor (mouth)
    aud1=mean(unpackconnmat(mat1(310:333, 310:333))); % auditory
    
    allnws1(sub, :)=[dmn1 pao1 fp1 sal1 cop1 mep1 dan1 van1 vis1 smh1 smm1 aud1];
    
    
    % Compute each RSN average for session 2
    
    dmn2=mean(unpackconnmat(mat2(48:88, 48:88))); % default mode
    pao2=mean(unpackconnmat(mat2(89:96, 89:96))); % parieto-occipital
    fp2=mean(unpackconnmat(mat2(97:120, 97:120))); % fronto-parietal
    sal2=mean(unpackconnmat(mat2(121:124, 121:124))); % salience
    cop2=mean(unpackconnmat(mat2(125:164, 125:164))); % cingulo-opercular
    mep2=mean(unpackconnmat(mat2(165:169, 165:169))); % medial parietal
    dan2=mean(unpackconnmat(mat2(170:201, 170:201))); % dorsal attention
    van2=mean(unpackconnmat(mat2(202:224, 202:224))); % ventral attention
    vis2=mean(unpackconnmat(mat2(225:263, 225:263))); % visual
    smh2=mean(unpackconnmat(mat2(264:301, 264:301))); % supplementary motor (hand)
    smm2=mean(unpackconnmat(mat2(302:309, 302:309))); % supplementary motor (mouth)
    aud2=mean(unpackconnmat(mat2(310:333, 310:333))); % auditory
    
    allnws2(sub, :)=[dmn2 pao2 fp2 sal2 cop2 mep2 dan2 van2 vis2 smh2 smm2 aud2];
    
    
end

    csvwrite(strcat(edges_outputpath, '/RSNavg1_gsr_unr.csv'), allnws1)
    csvwrite(strcat(edges_outputpath, '/RSNavg2_gsr_unr.csv'), allnws2)

% Now compute the ICC for these values

t1=csvread(strcat(edges_outputpath, '/RSNavg1_gsr_unr.csv'));
t2=csvread(strcat(edges_outputpath, '/RSNavg2_gsr_unr.csv'));


for feat=1:size(t1, 2)
    
    data=[ t1(:,feat) t2(:,feat) ];
    [r, LB, UB, F, df1, df2, p] = ICC(data, 'C-1');
    allicc_gsr(feat)=r;
    alllb_gsr(feat)=LB;
    allub_gsr(feat)=UB;
    allp_gsr(feat)=p;
    
end

csvwrite(strcat(ICC_outputpath, '/ICC_RSN_gordon_icc_gsr_unr.csv'), allicc_gsr)
csvwrite(strcat(ICC_outputpath, '/ICC_RSN_gordon_ub_gsr_unr.csv'), allub_gsr)
csvwrite(strcat(ICC_outputpath, '/ICC_RSN_gordon_lb_gsr_unr.csv'), alllb_gsr)
csvwrite(strcat(ICC_outputpath, '/ICC_RSN_gordon_p_gsr_unr.csv'), allp_gsr)


% Create bar plot

allicc=csvread(strcat(ICC_outputpath, '/ICC_RSN_gordon_icc_unr.csv'))
allicc_gsr=csvread(strcat(ICC_outputpath, '/ICC_RSN_gordon_icc_gsr_unr.csv'))
allub=csvread(strcat(ICC_outputpath, '/ICC_RSN_gordon_ub_unr.csv'))
allub_gsr=csvread(strcat(ICC_outputpath, '/ICC_RSN_gordon_ub_gsr_unr.csv'))

ctrs = 1:12;
data = [allicc' allicc_gsr'];
errs = [(allub-allicc)' (allub_gsr-allicc_gsr)' ];

figure(1)
hBar = bar(ctrs, data,'LineWidth',1, 'BarWidth', 0.8);
for k1 = 1:size(data,2)
    ctr(k1,:) = bsxfun(@plus, hBar(1).XData, [hBar(k1).XOffset]');
    ydt(k1,:) = hBar(k1).YData;
end
hold on
errorbar(ctr, ydt, errs', '.', 'Color', 'k', 'LineWidth',1.5)
hold off


ylim([0.2 0.9])
xticklabels({'DMN' 'PAO' 'FP' 'SAL' 'COP' 'MEP' 'DAN' 'VAN' 'VIS' 'SMH' 'SMM' 'AUD'})
ylabel('ICC of average FC')
title('Reliability of resting state networks (unrelated)')
legend({'No GSR' 'GSR'})
